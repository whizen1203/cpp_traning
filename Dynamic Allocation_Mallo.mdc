## 동적 할당(Dynamic Allocation / Malloc) : 컴퓨터 프로그래밍에서 프로그램 실행 중에 메모리를 할당하는 프로세스. 
프로그램에서 사용할 메모리 공간의 크기를 미리 알 수 없거나 실행 중에 메모리의 크기가 변경될 가능성이 있을 때 동적 할당을 사용한다.


### 동적 할당의 주요 특징:
1. 메모리는 힙(heap) 영역에서 할당됨.
2. 동적으로 할당된 메모리는 프로그래머에 의해 **명시적으로 해제되어야 한다.**
3. 동적 할당은 주로 **포인터를 통해 관리된다.**


### 동적 할당의 장점 : 상황에 따라서 원하는 크기 만큼의 메모리가 할당되고 이미 할당된 메모리라도 언제든지 크기의 조정이 가능하다.

### 동적 할당의 단점 : 더 이상 사용되지 않을 때에는 반드시 명시적으로 해제해 주어야 한다. 안하면 메모리 누수가 발생할 수 있다.

#### 관련 함수(C언어 기준)

1. void * malloc(size_t size);   // size 바이트의 메모리를 힘에서 할당하여 반환
2. void free(void * ptr);        // ptr이 가리키는 메모리를 해제


#### 관련 예시(C++ 기준)

##### 동적 할당
``` cpp
int *ptr = new int;  // 정수를 위한 메모리를 동적으로 할당
*ptr = 10;           // 할당된 메모리에 10을 저장

delete ptr;          // 동적으로 할당된 메모리 해제
```

##### 동적 할당 해제
``` cpp
int *arr = new int[10];  // 10개의 정수를 저장할 수 있는 메모리를 동적으로 할당

for (int i = 0; i < 10; i++) {
    arr[i] = i;
}

delete[] arr;            // 동적으로 할당된 배열 메모리 해제
```

=====

### malloc / free 와 new / delete는 무슨 차이?

#### 공통점 : 둘 다 메모리를 동적 할당 및 할당 해제를 위해 사용된다.

#### 차이점 : 

1. 사용언어
malloc / free : 주로 C언어에서 사용.
new / delete : C++에서 사용.

2. 할당 방식 
malloc / free : 지정된 크기의 메모리를 할당하고 그 메모리의 주소를 반환하며, 이 때, 할당된 메모리는 초기화되지 않는다.
``` c
int *arr = (int*)malloc(5 * sizeof(int));  // 5개의 int 크기만큼의 메모리를 할당
```

new / delete : new 연산자는 객체를 위한 메모리를 할당하면서 해당 객체의 생성자를 호출한다. 기본 데이터 타입의 경우, **초기화를 따로 하지 않으면 값이 미정의** 된다.
``` c++
int *num = new int;     // int를 위한 메모리를 할당
int *arr = new int[5];  // 5개의 int를 위한 메모리를 할당
```

3. 해제 방식 
malloc / free : **free 함수** 를 이용하여 해제. **단순한 메모리 반환이기 때문에 소멸자나 정리 코드를 호출하지 않는다.**
``` c
free(arr);
```

new / delete : **delete 연산자** 를 사용하여 해제. **객체의 경우, 소멸자도 호출된다.** 
``` c++
delete num;
delete[] arr;  // 배열을 할당 해제할 때는 delete[]를 사용
```

4. 오류 처리
malloc / free : 메모리 할당에 실패시, NULL을 반환.
new / delete : 메모리 할당에 실패시, bad_alloc 예외를 발생.


5. 사용 편의성
malloc / free : malloc은 '할당할 크기를 바이트 단위로 지정'해야 하며, 반환 타입이 void*이므로 적절한 타입으로 캐스팅이 필요하다.
new / delete : new는 '자료형에 따라 자동으로 크기를 계산'하며, 반환 타입도 해당 자료형의 포인터 타입으로 결정되므로 **별도의 캐스팅이 필요 없다.**


=====
### 가상 메모리 할당 함수(VirtualAlloc) : 가상 메모리를 할당, 보호, 또는 커밋 상태 변경하는 용도로 사용한다. 
Win32 API의 일부이며, 주로 더 큰 메모리 블록의 할당이나 메모리의 보호 수준 변경 등의 고급 기능이 필요할 때 사용한다.

#### 주요 특징 : 
1. 페이지 단위 메모리 할당 : 메모리를 페이지 단위로 할당한다. 일반적으로 4kb의 크기의 페이지를 가지지만, 시스템에 따라 다를 수 있다.
2. Commit과 Reserve : VirtualAlloc을 사용하여 메모리를 할당할 때, 두 단계로 나눠서 처리할 수 있다.
- Reserve : 메모리 주소 공간만을 예약합니다. 실제 메모리는 할당되지 않는다.
- Commit : 예약된 메모리 주소 공간에 실제 메모리를 할당한다.
3. 보호 수준 설정 : 메모리를 할당할 때, 해당 메모리 영역의 접근 권한(읽기, 쓰기, 실행)을 지정할 수 있다.

#### 함수의 프로토타입 예시
``` c
LPVOID VirtualAlloc(
  LPVOID lpAddress, 	// 원하는 시작 주소를 지정. 보통 NULL을 지정하면 시스템이 적절한 주소를 선택한다.
  SIZE_T dwSize,      	// 할당하거나 예약하려는 메모리의 크기를 바이트 단위로 지정한다.
  DWORD  flAllocationType,    // 메모리 할당의 유형을 지정한다. (예: MEM_COMMIT, MEM_RESERVE)
  DWORD  flProtect	            // 메모리 페이지의 보호 옵션을 지정한다. (예: PAGE_READONLY, PAGE_READWRITE)


// 1MB의 메모리를 예약하고 할당
void* mem = VirtualAlloc(NULL, 1024 * 1024, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
// VirtualAlloc을 사용하여 할당한 메모리는 VirtualFree 함수를 사용하여 해제해야 하며, 
// VirtualAlloc의 경우 일반적인 메모리 할당에는 오버헤드가 있을 수 있기 때문에, 일반적인 경우에는 malloc 혹은 new와 같은 표준 메모리 할당 함수/연산자를 사용하는 것이 권장된다.
);
```
